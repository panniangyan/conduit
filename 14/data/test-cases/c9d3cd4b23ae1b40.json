{
  "uid" : "c9d3cd4b23ae1b40",
  "name" : "test__login",
  "fullName" : "test.test_conduit_remek_panniangyan.TestConduit#test__login",
  "historyId" : "e7f6e9b76f0a337749fb940a3f5a122d",
  "time" : {
    "start" : 1628255425110,
    "stop" : 1628255435564,
    "duration" : 10454
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <test_conduit_remek_panniangyan.TestConduit object at 0x7f2456807a90>\n\n    def test__login(self):\n        accept_cookies(self.browser)\n        user_login = {\"Email\": \"user2@hotmail.com\",\n                      \"Password\": \"Userpass1\"\n                      }\n        xpath(self.browser, '//*[@href=\"#/login\"]').click()\n        time.sleep(1)\n        for k, v in user_login.items():\n            xpath(self.browser, f'//*[@placeholder=\"{k}\"]').send_keys(v)\n        time.sleep(1)\n        xpath(self.browser, '//button[1]').click()\n        time.sleep(1)\n        # assert\n>       user_name = WebDriverWait(self.browser, 5).until(\n            EC.visibility_of_element_located((By.XPATH, '//*[@class=\"nav-link\" and contains(text(),\"user2\")]'))\n        )\n\ntest/test_conduit_remek_panniangyan.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7cf11a09b178f3e21a7ee64b904440c3\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7f24567c0070>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <test_conduit_remek_panniangyan.TestConduit object at 0x7f2456807a90>\n\n    def test__login(self):\n        accept_cookies(self.browser)\n        user_login = {\"Email\": \"user2@hotmail.com\",\n                      \"Password\": \"Userpass1\"\n                      }\n        xpath(self.browser, '//*[@href=\"#/login\"]').click()\n        time.sleep(1)\n        for k, v in user_login.items():\n            xpath(self.browser, f'//*[@placeholder=\"{k}\"]').send_keys(v)\n        time.sleep(1)\n        xpath(self.browser, '//button[1]').click()\n        time.sleep(1)\n        # assert\n>       user_name = WebDriverWait(self.browser, 5).until(\n            EC.visibility_of_element_located((By.XPATH, '//*[@class=\"nav-link\" and contains(text(),\"user2\")]'))\n        )\n\ntest/test_conduit_remek_panniangyan.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7cf11a09b178f3e21a7ee64b904440c3\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7f24567c0070>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../../.local/lib/python3.8/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "66ad4850164e1c35",
      "name" : "log",
      "source" : "66ad4850164e1c35.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "32f3127c639d275d",
      "name" : "stderr",
      "source" : "32f3127c639d275d.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "test_conduit_remek_panniangyan"
  }, {
    "name" : "subSuite",
    "value" : "TestConduit"
  }, {
    "name" : "host",
    "value" : "fv-az74-184"
  }, {
    "name" : "thread",
    "value" : "3811-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.test_conduit_remek_panniangyan"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c9d3cd4b23ae1b40.json",
  "parameterValues" : [ ]
}