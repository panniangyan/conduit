{
  "uid" : "ed34cc7c8bfb591",
  "name" : "test__login",
  "fullName" : "test.conduit_test.TestConduit#test__login",
  "historyId" : "3e462d8dd1cd034d904b57d200357f84",
  "time" : {
    "start" : 1628016989507,
    "stop" : 1628017000989,
    "duration" : 11482
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <conduit_test.TestConduit object at 0x7fe24d0975e0>\n\n    def test__login(self):\n        user_login = {\"email\": \"user2@hotmail.com\",\n                      \"password\": \"Userpass1\"\n                      }\n        self.test__accept_cookies()\n    \n        self.browser.find_element_by_xpath('//*[@href=\"#/login\"]').click()\n        time.sleep(1)\n        self.browser.find_element_by_xpath('//*[@placeholder=\"Email\"]').send_keys(user_login[\"email\"])\n        self.browser.find_element_by_xpath('//*[@placeholder=\"Password\"]').send_keys(user_login[\"password\"])\n        time.sleep(1)\n        self.browser.find_element_by_xpath('//button[1]').click()\n        time.sleep(1)\n        # assert\n>       user_name = WebDriverWait(self.browser, 5).until(\n            EC.visibility_of_element_located((By.XPATH, '//*[@class=\"nav-link\" and contains(text(),\"user2\")]'))\n        )\n\ntest/conduit_test.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2f2853cd4d7eea889308c6c90eefcc9f\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7fe24d063760>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <conduit_test.TestConduit object at 0x7fe24d0975e0>\n\n    def test__login(self):\n        user_login = {\"email\": \"user2@hotmail.com\",\n                      \"password\": \"Userpass1\"\n                      }\n        self.test__accept_cookies()\n    \n        self.browser.find_element_by_xpath('//*[@href=\"#/login\"]').click()\n        time.sleep(1)\n        self.browser.find_element_by_xpath('//*[@placeholder=\"Email\"]').send_keys(user_login[\"email\"])\n        self.browser.find_element_by_xpath('//*[@placeholder=\"Password\"]').send_keys(user_login[\"password\"])\n        time.sleep(1)\n        self.browser.find_element_by_xpath('//button[1]').click()\n        time.sleep(1)\n        # assert\n>       user_name = WebDriverWait(self.browser, 5).until(\n            EC.visibility_of_element_located((By.XPATH, '//*[@class=\"nav-link\" and contains(text(),\"user2\")]'))\n        )\n\ntest/conduit_test.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2f2853cd4d7eea889308c6c90eefcc9f\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7fe24d063760>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dc852763d2385783",
      "name" : "log",
      "source" : "dc852763d2385783.txt",
      "type" : "text/plain",
      "size" : 344
    }, {
      "uid" : "67d8d897bd9ce719",
      "name" : "stdout",
      "source" : "67d8d897bd9ce719.txt",
      "type" : "text/plain",
      "size" : 25
    }, {
      "uid" : "5d1029851f683f8c",
      "name" : "stderr",
      "source" : "5d1029851f683f8c.txt",
      "type" : "text/plain",
      "size" : 215
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test"
  }, {
    "name" : "suite",
    "value" : "conduit_test"
  }, {
    "name" : "subSuite",
    "value" : "TestConduit"
  }, {
    "name" : "host",
    "value" : "fv-az83-815"
  }, {
    "name" : "thread",
    "value" : "3663-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test.conduit_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ed34cc7c8bfb591.json",
  "parameterValues" : [ ]
}